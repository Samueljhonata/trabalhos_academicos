package interfaces;

import ClienteServidor.*;
import java.awt.Color;
import java.net.*;
import java.util.logging.*;
import utilitarios.*;

public class ServidorJogo extends javax.swing.JFrame {

    private static Servidor servidor;
    private static int PORTA;

    public ServidorJogo() {
        initComponents();
        btnDesconectar.setVisible(false);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        lblConectado = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        lblIP = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        lblPorta = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        lblNomeJ2 = new javax.swing.JLabel();
        lblNomeJ1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtPorta = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        btnDesconectar = new javax.swing.JButton();
        btnConectar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        lblConectado.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lblConectado.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblConectado.setText("Servidor n√£o conectado");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel3.setText("End. IP:");

        lblIP.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lblIP.setText("IP");

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setText("Porta Conectada:");

        lblPorta.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lblPorta.setText(" ");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel4.setText("Jogador 2:");

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel5.setText("Jogador 1:");

        lblNomeJ2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lblNomeJ2.setText(" ");

        lblNomeJ1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lblNomeJ1.setText(" ");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel2.setText("Conectar Porta:");

        txtPorta.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        txtPorta.setText("4444");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblConectado, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblNomeJ2, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblNomeJ1, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(txtPorta, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(lblIP, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblPorta, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 105, Short.MAX_VALUE))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblConectado)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(jLabel2))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(txtPorta, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(lblIP))
                .addGap(7, 7, 7)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(lblPorta))
                .addGap(7, 7, 7)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(lblNomeJ1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(lblNomeJ2))
                .addContainerGap(47, Short.MAX_VALUE))
        );

        btnDesconectar.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnDesconectar.setText("Desconectar");
        btnDesconectar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDesconectarActionPerformed(evt);
            }
        });

        btnConectar.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnConectar.setText("Conectar");
        btnConectar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConectarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap(26, Short.MAX_VALUE)
                .addComponent(btnConectar, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnDesconectar, javax.swing.GroupLayout.DEFAULT_SIZE, 133, Short.MAX_VALUE)
                .addContainerGap(28, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnDesconectar)
                    .addComponent(btnConectar))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(12, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(50, Short.MAX_VALUE)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(50, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(20, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap(20, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnConectarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConectarActionPerformed
        try {
            PORTA = Integer.parseInt(txtPorta.getText());
        } catch (Exception e) {
            PORTA = 4444;
        }

        servidor = new Servidor(PORTA);
        try { //pega IP do servidor
            lblIP.setText(InetAddress.getLocalHost().getHostAddress());

        } catch (UnknownHostException e) {
            System.err.println("Erro ao pegar IP");

        }

        if (servidor.estabeleceServidor()) { //estabelece servidor
            lblPorta.setText(Integer.toString(servidor.getPorta()));
            lblConectado.setText("Servidor conectado");
            lblConectado.setForeground(Color.blue);
            btnConectar.setVisible(false);
            btnDesconectar.setVisible(true);

        } else {
            lblConectado.setText("Servidor n√£o foi conectado");
            lblConectado.setForeground(Color.red);
        }


    }//GEN-LAST:event_btnConectarActionPerformed

    private void btnDesconectarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDesconectarActionPerformed
        // TODO add your handling code here:
        if (servidor.encerraServidor()) {
            lblConectado.setText("Servidor Desconectado");
            lblConectado.setForeground(Color.red);
            btnDesconectar.setVisible(false);
            btnConectar.setVisible(true);
            lblPorta.setText("");
        } else {
            lblConectado.setText("N√£o foi poss√≠vel desconectar o servidor");
            lblConectado.setForeground(Color.red);
        }
    }//GEN-LAST:event_btnDesconectarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ServidorJogo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ServidorJogo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ServidorJogo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ServidorJogo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ServidorJogo().setVisible(true);
            }
        });

        //JOGO
        Jogo jogo;
        String mensagem, nomeJ1, nomeJ2, resposta;
        int jogada1, jogada2, resultado;

        while (true) { //repete sempre
            try {
                while (true) { //identificando jogadores
                    if (servidor != null) {

                        if (servidor.isServidorEstabelecido()) {
                            //aceita jogador 1
                            System.out.println("Esperando jogador 1");
                            servidor.aceitaConexao();
                            nomeJ1 = servidor.fazComunicacao("1", 1, 120).split(";")[1];
                            System.err.println(nomeJ1);
                            lblNomeJ1.setText(nomeJ1);

                            //aceita jogador 2
                            System.out.println("Esperando jogador 2");
                            servidor.aceitaConexao();
                            nomeJ2 = servidor.fazComunicacao("2", 2, 120).split(";")[1];
                            System.err.println(nomeJ2);
                            lblNomeJ2.setText(nomeJ2);

                            break;
                        } else {
                            System.out.println("Ainda n√£o recebeu jogadores");
                        }

                    } else {
                        System.out.println("Ainda n√£o foi conectado");
                    }
                }

                System.out.println("Jogadores Identificados");

                //cria jogo
                jogo = new Jogo(nomeJ1, nomeJ2);

                //envia dados aos jogadores
                System.out.println("Enviando dados jogador 1");

                mensagem = servidor.fazComunicacao(jogo.getNomeJogador1() + ";"
                        + jogo.getNomeJogador2() + ";"
                        + jogo.getPtsJogador1() + ";"
                        + jogo.getPtsJogador2() + ";"
                        + "Voc√™ deve come√ßar" + ";"
                        + "-1" + ";"
                        + "-1", 1, 120);

                System.err.println(mensagem);

                System.out.println("Enviando dados jogador 2");
                System.err.println(servidor.fazComunicacao(jogo.getNomeJogador1() + ";"
                        + jogo.getNomeJogador2() + ";"
                        + jogo.getPtsJogador1() + ";"
                        + jogo.getPtsJogador2() + ";"
                        + "Voc√™ deve esperar a sua vez" + ";"
                        + "-1" + ";"
                        + "-1", 2, 120));

                //jogo acontecendo
                while (!jogo.isJogoTerminado()) { //repete at√© que alguem ganhe

                    //recebe jogada 1
                    System.out.println("Esperando jogada Jogador 1");
                    mensagem = servidor.fazComunicacao(jogo.getNomeJogador1() + ";"
                            + jogo.getNomeJogador2() + ";"
                            + jogo.getPtsJogador1() + ";"
                            + jogo.getPtsJogador2() + ";"
                            + "Aguarde a jogada do outro jogador" + ";"
                            + "-1" + ";"
                            + "-1", 1, 120);

                    System.err.println(mensagem);
                    jogada1 = Integer.parseInt(mensagem.split(";")[1]);

                    //deve enviar mensagem p/ cliente 2 permitindo ele jogar
                    //servidor.fazComunicacao("----------------------Sua vez", 2, 60);
                    //recebe jogada 2
                    System.out.println("Esperando jogada Jogador 2");
                    mensagem = servidor.fazComunicacao(jogo.getNomeJogador1() + ";"
                            + jogo.getNomeJogador2() + ";"
                            + jogo.getPtsJogador1() + ";"
                            + jogo.getPtsJogador2() + ";"
                            + "Aguarde, calculando o resultado..." + ";"
                            + "-1" + ";"
                            + "-1", 2, 120);

                    System.err.println(mensagem);
                    jogada2 = Integer.parseInt(mensagem.split(";")[1]);

                    //faz a jogada
                    resultado = jogo.jogada(jogada1, jogada2);
                    resposta = "Calculando resposta";

                    if (resultado == 0) { //empate
                        resposta = ("Empate! ");

                    } else if (resultado == 1) { //jogador 1 venceu a rodada
                        resposta = ("Jogador 1 (" + nomeJ1 + ") venceu a rodada!");

                    } else if (resultado == 2) {//jogador 2 venceu a rodada
                        resposta = ("Jogador 2 (" + nomeJ2 + ") venceu a rodada!");

                    }

                    //atualiza dados dos clientes
                    //cliente 1
                    servidor.fazComunicacao(jogo.getNomeJogador1() + ";"
                            + jogo.getNomeJogador2() + ";"
                            + jogo.getPtsJogador1() + ";"
                            + jogo.getPtsJogador2() + ";"
                            + resposta + "Sua vez de jogar.;"
                            + jogada1 + ";"
                            + jogada2, 1, 120);

                    //cliente 2
                    servidor.fazComunicacao(jogo.getNomeJogador1() + ";"
                            + jogo.getNomeJogador2() + ";"
                            + jogo.getPtsJogador1() + ";"
                            + jogo.getPtsJogador2() + ";"
                            + resposta + " Espere sua vez de jogar.;"
                            + jogada1 + ";"
                            + jogada2, 2, 120);

                    //verifica se o jogo terminou
                    if (jogo.isJogoTerminado()) { //se o jogo terminou, envia resultado da partida
                        int vencedor = jogo.vencedor();
                        System.out.println("Jogo terminado!");
                        System.out.println("Vencedor: Jogador " + vencedor);
                        servidor.fazComunicacao(" Jogador " + vencedor + " venceu a partida!", 1, 60);
                        servidor.fazComunicacao(" Jogador " + vencedor + " venceu a partida!", 2, 60);
                        System.out.println("");
                        System.out.println("------------------------");
                        servidor.encerraConexao(1);
                        servidor.encerraConexao(2);
                        lblNomeJ1.setText("");
                        lblNomeJ2.setText("");
                        break;
                    } else { //se o jogo nao terminou
                        System.out.println("Jogo ainda nao terminou!");
                        servidor.fazComunicacao("N√£o terminou", 1, 60);
                        servidor.fazComunicacao("N√£o terminou", 2, 60);
                        System.out.println("");
                        System.out.println("------------------------");
                    }

                }

            } catch (Exception e) {
                System.out.println("Erro no servidor! Servidor reiniciado!");
                lblNomeJ1.setText("");
                lblNomeJ2.setText("");
                servidor.encerraServidor();
                servidor = new Servidor(PORTA);
                servidor.estabeleceServidor();
            }
        }

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnConectar;
    private javax.swing.JButton btnDesconectar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JLabel lblConectado;
    private javax.swing.JLabel lblIP;
    private static javax.swing.JLabel lblNomeJ1;
    private static javax.swing.JLabel lblNomeJ2;
    private javax.swing.JLabel lblPorta;
    private javax.swing.JTextField txtPorta;
    // End of variables declaration//GEN-END:variables
}
